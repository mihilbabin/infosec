%h5.text-center.mt-4#theory= t('nav.theory')
.report
  %p Пароль – це секретна інформація, якою має володіти тільки авторизований суб’єкт.
  %p Паролем може бути слово, комбінація для замка чи персональний ідентифікаційний номер (PIN).
  %p Парольний механізм може бути досить легко реалізований і мати низьку вартість. Але є суттєві мінуси: зберегти пароль в секреті часто буває проблематично, зловмисники постійно придумують нові методи крадіжки, зламу й підбору пароля. Це обумовлює слабку захищеність парольного механізму.  
  %p 
    Для виконання завдання використаємо такі способи підвищення захищеності пароля - 
    Перевірка мінімальної довжини пароля (10 символів) та
    Перевірка допустимої кількості разів введення пароля (7 разів).
%h5.text-center.mt-4#algorithm= t('nav.algorithm')
.report
  %p
    %ol
      %li Перед створенням користувача в базі перевіримо чи довжина його пароля входить в заданий діапазон.
      %li Зашифруємо пароль використавши bcrypt алгоритм
      %li Перед спробою входу користувача перевіримо чи вірно введена комбінація емейлу і пароля
      %li Якщо користувач використав неправильні дані то відхиляємо його запит і збільшуємо лічильник неправильних спроб
      %li Якщо користувач використав правильні дані то перевіримо чи він вичерпав ліміт введень. Якщо так то відхиляємо його, якщо ні то здійснєюмо його вхід до системи.
%h5.text-center.mt-4#listing= t('nav.listing')
%ul#pills-tab.nav.nav-pills.mb-3{:role => "tablist"}
  %li.nav-item
    %a#pills-model-tab.nav-link.active{"aria-controls" => "pills-model", "aria-selected" => "true", "data-toggle" => "pill", :href => "#pills-model", :role => "tab"}= t('lab4.model')
  %li.nav-item
    %a#pills-registrations-tab.nav-link{"aria-controls" => "pills-registrations", "aria-selected" => "false", "data-toggle" => "pill", :href => "#pills-registrations", :role => "tab"}= t('lab4.registrations')
  %li.nav-item
    %a#pills-sessions-tab.nav-link{"aria-controls" => "pills-sessions", "aria-selected" => "false", "data-toggle" => "pill", :href => "#pills-sessions", :role => "tab"}= t('lab4.sessions')
  %li.nav-item
    %a#pills-helpers-tab.nav-link{"aria-controls" => "pills-helpers", "aria-selected" => "false", "data-toggle" => "pill", :href => "#pills-helpers", :role => "tab"}= t('lab4.helpers')
#pills-tabContent.tab-content
  #pills-model.tab-pane.fade.show.active{"aria-labelledby" => "pills-model-tab", :role => "tabpanel"}
    %pre
      %code{class: 'ruby'}
        :preserve
          class User < ApplicationRecord
            MAX_ATTEMPTS = 7
            has_secure_password

            validates :name, :email, presence: true
            validates :email, uniqueness: true, format: { with: URI::MailTo::EMAIL_REGEXP }
            validates :password, length: { minimum: 10, maximum: 32 }, if: :password

            scope :locked, -> { where('attempts >= ?', MAX_ATTEMPTS) }

            before_save { self.email = email.downcase }

            def locked?
              attempts >= MAX_ATTEMPTS
            end
          end
  #pills-registrations.tab-pane.fade{"aria-labelledby" => "pills-registrations-tab", :role => "tabpanel"}
    %pre
      %code{class: 'ruby'}
        :preserve
          class UsersController < ApplicationController
            before_action :set_labs

            def new
              @user = User.new
            end

            def create
              @user = User.new(user_params)

              if @user.save
                flash[:notice] = I18n.t('users.registrations.success', name: @user.name)
                redirect_to new_session_path
              else
                flash.now.alert = I18n.t('users.registrations.error')
                render :new
              end
            end

            private

            def user_params
              params.require(:user).permit(:name, :email, :password, :password_confirmation)
            end
          end
  #pills-sessions.tab-pane.fade{"aria-labelledby" => "pills-sessions-tab", :role => "tabpanel"}
    %pre
      %code{class: 'ruby'}
        :preserve
          class SessionsController < ApplicationController
            before_action :set_labs, except: :destroy
            before_action :set_user, only: :create

            def new
              redirect_to root_url if logged_in?
            end

            def create
              if @user&.authenticate(params[:session][:password])
                reject_locked!
              else
                @user&.increment!(:attempts) unless @user&.locked?
                flash.now[:error] = I18n.t('users.sessions.error')
                render :new
              end
            end

            def destroy
              log_out
              redirect_to root_url, notice: I18n.t('users.sessions.logout')
            end

            private

            def set_user
              @user = User.find_by email: params[:session][:email].downcase
            end

            def reject_locked!
              if @user.locked?
                redirect_to new_session_path, alert: I18n.t('users.sessions.locked')
              else
                log_in @user
                redirect_to root_url, success: I18n.t('users.sessions.success', name: @user.name)
              end
            end
          end
  #pills-helpers.tab-pane.fade{"aria-labelledby" => "pills-helpers-tab", :role => "tabpanel"}
    %pre
      %code{class: 'ruby'}
        :preserve
          module SessionsHelper
            def log_in(user)
              session[:user_id] = user.id
            end

            def current_user
              @current_user ||= User.find_by(id: session[:user_id]) if session[:user_id]
            end

            def logged_in?
              current_user.present?
            end

            def log_out
              session.delete(:user_id)
              @current_user = nil
            end
          end
%h5.text-center.mt-4#results= t('nav.results')
.report
.row.mt-3
  .col-12.with-img
    %div
      = image_tag 'sign_up.png'
    .row.mb-3
      %strong Рис. 1. Реєстрація
.row.mt-3
  .col-12.with-img
    %div
      = image_tag 'sign_in.png'
    .row.mb-3
      %strong Рис. 2. Вхід
.row.mt-3
  .col-12.with-img
    %div= image_tag 'locked.png'
    .row.mb-3
      %strong Рис. 3. Акаунт заблокований
.row.mt-3
  .col-12.with-img
    %div= image_tag 'logged_in.png'
    .row.mb-3
      %strong Рис. 4. Успішний вхід
%h5.text-center.mt-4#conclusion= t('nav.conclusion')
.report
  %p
    В даній лабораторній роботі я освоїв основні механізми парольного захисту інформаційних систем, сформувати структуру та реалізував модуль парольного захисту власного програмного продукту.
  %p
    Захист здійсює шифрування паролю, перевірку довжини на перевірку кількості неправильних введень.

